# Application
spring.application.name=interview

topic.name=interview
message.count=5000

# Kafka
spring.kafka.consumer.group-id=interview
spring.kafka.bootstrap-servers=localhost:9092
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=org.springframework.kafka.support.serializer.JsonDeserializer
spring.kafka.consumer.properties.spring.json.trusted.packages=ir.metrix.interview

#### performance tuning
# Inter process communication simulation delay, just to get the performance results faster(testing purpose).
operation.delay=5
# I've done the partitioning based on the userId's hash(consistent hashing).
# Each partition can be processed in parallel by a dedicated thread.
# This maximizes throughput and ensures that the processing load is evenly distributed across available threads.
# Right now, we have 2 concurrent consumers(check MessageConsumer.java), so we can process data in 2 partitions with 2 dedicated active consumers.
partition.count=2
# Batching allows multiple messages to be sent together in a single network request.
# The 16KB batch size is large enough to reduce the network load, also small enough to process multiple batches concurrently without running into memory issues.
# Estimation:
#   each message size = ~35
#   16,384 / 35 = 468 messages per batch
spring.kafka.producer.batch-size=16384